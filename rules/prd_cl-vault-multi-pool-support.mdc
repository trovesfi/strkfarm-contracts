# Add support for multiple pools in Cl Vault
Where is CL Vault?
./src/strategies/cl_vault/cl_vault.cairo

## Current Setup
1. On Deployment, a pool key is passed, which is stored as `pool_key`.
2. The deposits and withdrawals happen on this pool key. 
3. Theere is a rebalance function which changes position of the vault on this pool key.

## Proposed Changes
1. **Multiple Pool Support**:
   - Modify the contract to accept multiple pool keys.
   - Store these pool keys in a mapping or array (use alexandria list for storing array)
   - Keep the constructor to accept one pool key, which will be in the default index (0).
2. Add a setting to store default index for the pool key.
3. **Deposit and Withdraw**:
    - do not change argument of the functions
    - Modify the deposit to deposit from the default pool key.
    - Modify the withdraw to loop through all pool keys until required amount is withdrawn.
    - Start by default pool index, then loop on others
    - The nft id will also be unique for each pool key, so it will be stored in a mapping of pool key index to nft id. Same will apply for bounds.
4. **Rebalance**:
   - Modify the rebalance function to accept a from pool key index and to pool key index (ENFORCE the index to be provided).
   - Also add parameter to specify the liquidity to be withdrawn from the pool.
   - Update events to include the from and to pool key indices. 
5. Add functions to add/remove pool keys.
   - Add:
    - assert_governor_role
    - Can be a duplicate pool key (bcz multiple positions can be opened on the same pool key, but each will have its own nft id).
    - Add to the end of the list.
    - Emit event on addition.
   - Remove:
    - assert_governor_role
    - index to be passed to remove
    - check if index is valid.
    - The liquidity on pool_key must be 0
    - remove the pool key from the list (swap with last one) and also the corresponding nft id mapping.
    - Emit event on removal.
   - Get => Returns pool key, nft id and its bounds for the given index.
   - Total pools => Returns the total number of pool keys stored in the contract.
   - update default pool index => Allows to set the default pool key index.
    - If the index is invalid, revert.
    - Relayer permission
6. Total liquidity computation:
    - Get liquidity of each pool key for their respective nft id.
    - Convert them to return token0 and token1 amounts.
    - Compute corresponding liquidity of the pool key if used in the default pool key so as to utilise the entire token0 and token1 amounts
    - the computed value is the total liquidity of the vault.
6. Total assets computation:
    - Get the total assets of each pool key for their respective nft id.
    - Convert them to return token0 and token1 amounts.
    - Compute corresponding assets of the pool key if used in the default pool key so as to utilise the entire token0 and token1 amounts
    - the computed value is the total assets of the vault.

# Note:
1. Alexandria list documentation: https://github.com/keep-starknet-strange/alexandria/blob/main/packages/storage/README.md
2. Modify the code with minimal changes to the existing code (else audit cost will increase).
3. Before proceeding with tests, ensure code compiles and take my approval.
4. Ensure to update the Scarb.toml file with any new dependencies required for the changes
5. Ensure to update the events to include the pool key index and nft id where applicable.
