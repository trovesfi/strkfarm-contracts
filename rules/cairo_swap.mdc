# Explains how to use swap module in our project
Local location: ./src/components/swap.cairo
import location: use strkfarm_contracts::components::swap;

### Key structs and types
```cairo
#[derive(Drop, Clone, Serde)]
pub struct AvnuMultiRouteSwap {
    pub token_from_address: ContractAddress,
    pub token_from_amount: u256,
    pub token_to_address: ContractAddress,
    pub token_to_amount: u256,
    pub token_to_min_amount: u256,
    /// must be the address of caller account or contract
    pub beneficiary: ContractAddress,
    /// for most use cases, this can be 0, unless explicitly testing for this
    /// Represents the additional fee to be charged on swap as an integrator fee.
    pub integrator_fee_amount_bps: u128,
    /// The address that will receive the integrator fee.
    /// This should be a valid contract address that can receive the fee.
    /// If the integrator fee is not applicable, this can be set to 0.
    /// e.g. let integrator = contract_address_const::<0>();
    pub integrator_fee_recipient: ContractAddress,
    pub routes: Array<Route>
}

#[derive(Drop, Clone, Serde)]
pub struct Route {
    pub token_from: ContractAddress,
    pub token_to: ContractAddress,
    pub exchange_address: ContractAddress,
    pub percent: u128,
    pub additional_swap_params: Array<felt252>,
}
```

### Example usage
```cairo
// required to create an instance of AvnuMultiRouteSwap
use strkfarm_contracts::components::swap::{AvnuMultiRouteSwap, Route};
// required for calling swap functions
use strkfarm_contracts::components::swap::{AvnuMultiRouteSwapImpl, AvnuMultiRouteSwapTrait};
// an oracle address is required during swap
use strkfarm_contracts::interfaces::oracle::{IPriceOracleDispatcher, IPriceOracleDispatcherTrait};

let swap_path = AvnuMultiRouteSwap { ... };
let oracle = IPriceOracleDispatcher { contract_address: strkfarm_contracts::helpers::constants::ORACLE_OURS() };
let output = swap_path.swap(oracle);
```

## Testing details
### Swap
We use Ekubo exchange most times for testing. So,
1. exchange_address: strkfarm_contracts::helpers::constants::EKUBO_CORE()
2. percent: 1000000000000 // 1000000000000 == 100%, use this always, unless there are more than one route, in which case, represents the percentage of the swap to be done on this route.
3. additional_swap_params: [
    token0_address.into(),
    token1_address.into(),
    fee,
    tick_spacing,
    0, // extension, always 0
    sqrt_distance_limit,
] // requires the configured params when using ekubo. its a felt252 array. 

### Add Liquidity
During test, when adding liquidity, its probably a good idea to take a bigger amount of tokens into caller (say 10x),  
approve the entire amount to the ekubo, and let ekubo decide how much to use for the add liquidity.
You pay tokens to ekubo, mint and deposit (else just deposit if already minted) the nft to the vault, and then call clear

### Important Constants
1. xSTRK/STRK
    - token0: xSTRK
    - token1: STRK
    - pool type 1: 0.01% fee, 0.02% tick spacing
        - fee: 34028236692093847977029636859101184
        - tick_spacing: 200
    - pool type 2: 0.05% fee, 0.1% tick spacing
        - fee: 170141183460469235273462165868118016
        - tick_spacing: 1000
2. STRK/xSTRK => Pool doesnt exist. Use xSTRK/STRK instead.


For any pool, sqrt_distance_limit is 18446748437148339061 if price is supposed to down on swap,  
and 6277100250585753475930931601400621808602321654880405518632 if price is supposed to go up on swap.  
- in this case, price is seen as token0_price / token1_price. so, if token0 is from token, token0 is being sold, which can create a downward price movement, and vice versa.


### Note:
- If a test setup requires swap path to be constructed multiple times, functionise it by taking the required parameters and returning an instance of `AvnuMultiRouteSwap`.
- Tests involving swaps are only possible in fork environment